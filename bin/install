#!/usr/bin/env bash

set -e
set -o pipefail

if [ -n "${DEBUG}" ]; then
  set -x
fi

ASDF_INSTALL_TYPE=${ASDF_INSTALL_TYPE:-version  }
TMPDIR=${TMPDIR:-/tmp}
[ -n "$ASDF_INSTALL_VERSION" ] || (>&2 echo 'Missing ASDF_INSTALL_VERSION' && exit 1)
[ -n "$ASDF_INSTALL_PATH" ] || (>&2 echo 'Missing ASDF_INSTALL_PATH' && exit 1)

install_kube_release() {
  local kube_release_name="$1"
  local install_type="$2"
  local version="$3"
  local install_path="$4"

  local bin_install_path="$install_path/bin"
  mkdir -p "${bin_install_path}"

  local platform="$(get_arch)"

  local download_url="$(get_download_url $kube_release_name $version $platform)"

  local bin_path="${bin_install_path}/${kube_release_name}"
  echo "Downloading ${kube_release_name} from ${download_url}"
  download "$download_url" "$bin_path"
  chmod +x "$bin_path"
}

get_arch() {
  uname | tr '[:upper:]' '[:lower:]'
}

get_stable_version_number() {
  local curl_cmd="$(command -vp curl)"
  echo "$($curl_cmd -fsS https://storage.googleapis.com/kubernetes-release/release/stable.txt | tr -d v)"
}

get_download_url() {
  local kube_release_name="$1"
  local version="$2"
  local platform="$3"

  echo "https://storage.googleapis.com/kubernetes-release/release/v${version}/bin/${platform}/$(get_cpu)/${kube_release_name}"
}

download() {
  local download_url="${1}"
  local output_path="${2}"
  local curl_cmd="$(command -vp curl)"
  $($curl_cmd -fsS "$download_url" -o "$output_path")
}

get_cpu() {
  local machine_hardware_name
  machine_hardware_name="$(uname -m)"

  case "$machine_hardware_name" in
    'x86_64') local cpu_type="amd64";;
    'powerpc64le' | 'ppc64le') local cpu_type="ppc64le";;
    'aarch64') local cpu_type="arm64";;
    *) local cpu_type="$machine_hardware_name";;
  esac

  echo "$cpu_type"
}

platform="$(get_arch)"

if [ "${platform}" = 'darwin' ]; then
  echo "this is not available on ${platform}"
else
  if [ "$ASDF_INSTALL_VERSION" = "stable" ]; then
      rm -rf "${ASDF_INSTALL_PATH}"
      actual_version="$(get_stable_version_number)"
      actual_version_path="$(dirname $ASDF_INSTALL_PATH)/${actual_version}"
      mkdir -p "${actual_version_path}"
      ln -s "${actual_version_path}" "${ASDF_INSTALL_PATH}"
  else
      actual_version="${ASDF_INSTALL_VERSION}"
  fi

  for release_item in "kubeadm" "kubectl" "kubelet"
  do
    install_kube_release "${release_item}" $ASDF_INSTALL_TYPE $actual_version $ASDF_INSTALL_PATH
  done
fi

if [ -n "${DEBUG}" ]; then
  set +x
fi
